---
title: "TD3"
format: html
editor: visual
---

# TD3

## Import et lecture des données

```{r}
library(stringr)
library(lubridate)
library(arrow)
library(dplyr)
library(tidyr)
library(jsonlite)
library(RSQLite)
```

### Question 1 :

Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?

```{r}
list.files("data")
```

Les 4 fichiers afichés ci-dessus sont ceux présents dans le dossie data. Nous observons 4 extensions différentes : .sqlite, .json, .csv et .parquet.

### Question 2 :

Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?

```{r}
tokyo_ath <- read_parquet("Data/tokyo_athletes.parquet")
str(tokyo_ath)
```

LA table tokyo_ath contient alors 11 085 lignes et 3 colonnes. Ces dernières renseignent le nom de l'athlète par la colonne name, son pays par la colonne NOC et enfin sa discipline par la colonne du même nom.

### Question 3 :

Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?

```{r}
olympics_ath <- fromJSON("Data/olympics_athletes.json")
str(olympics_ath)
```

Les colonnes présentes sont toutes affichées ci-dessus, la table contient 269731 observations de 13 variables.

### Question 4 :

Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.

```{r}
con <- dbConnect(SQLite(), dbName = "Data/data.sqlite")
dbListTables(con)
```

Auncune table ne semble présente dans la table.

### Question 5 :

Créez deux nouvelles tables dans la base de données à l'aide de la fonction dbWriteTable. Les tables s'appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.

```{r}
dbWriteTable(conn = con, "olympics_athletes", value = olympics_ath, overwrite = TRUE)
dbWriteTable(conn = con, "tokyo_athletes", value = tokyo_ath, overwrite = TRUE)
```

### Question 6 :

Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?

```{r}
dbListFields(con, "olympics_athletes")
```

Les colonnes affichées ci-dessus sont donc celles de la table olympics_athletes.

### Question 7 :

Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.

```{r}
olympics_athletes_tibble <- as_tibble(dbReadTable(con, "olympics_athletes"))
```

## dplyr, tidyr

### Question 8 :

Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.

```{r}
olympics_athletes_tibble |> mutate(Sex = as.factor(Sex))
```

### Question 9 :

Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l'année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d'été ou d'hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment.

```{r}
olympics_athletes_tibble <- olympics_athletes_tibble |>  separate_wider_delim(Games, delim = " " ,names = c("Year", "isSummer"))

olympics_athletes_tibble <- olympics_athletes_tibble |> mutate( isSummer = ifelse( isSummer == "Summer", TRUE, FALSE))
```

### Question 10 :

Calculez la moyenne d'age des athletes pour chacune des éditions des JO d'été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?

```{r}
moyenne_age_par_edition = olympics_athletes_tibble |> filter(isSummer == TRUE) |> group_by(Year) |> summarise(moyenne_age = mean(Age, na.rm = TRUE)) 

print(paste0("L'édition ayant compté les athlètes les plus vieux est celle de ", min(moyenne_age_par_edition$Year), " avec une moyenne de ", max(moyenne_age_par_edition$moyenne_age)))

print(paste0("L'édition ayant compté les athlètes les plus jeunes est celle de ", max(moyenne_age_par_edition$Year), " avec une moyenne de ", min(moyenne_age_par_edition$moyenne_age)))
```

### Question 11 :

Quelle est la discipline des JO d'été dont la taille des athlètes féminines est la plus grande ?

```{r}
athletes_femmes <- olympics_athletes_tibble %>%
  filter(Sex == "F")

taille_max <- athletes_femmes |> 
  group_by(Sport) |> 
  summarise(taille_moy = mean(Height, na.rm = TRUE)) |> 
  arrange(desc(taille_moy)) |> 
  slice(1)

print(paste0("la discipline des JO d’été dont la taille des athlètes féminines est la plus grande est le ", taille_max$Sport, " elles mesurent en moyenne ", round(taille_max$taille_moy, 2), " cm."))

```

Quelle a été cette discipline au cours de chacune des éditions ?

```{r}
taille_max_par_annee <- athletes_femmes |> 
  group_by(Year, Sport) |> 
  summarise(taille_moy = mean(Height, na.rm = TRUE)) 

taille_max_par_annee <- taille_max_par_annee  |> 
  group_by(Year) |> 
  top_n(1, taille_moy)  |> 
  arrange(Year)

for (i in 1:nrow(taille_max_par_annee)) {
  cat(sprintf("Édition %s : La discipline avec les athlètes les plus grands en moyenne est %s avec une taille moyenne de %.2f cm.\n", 
              taille_max_par_annee$Year[i], 
              taille_max_par_annee$Sport[i], 
              taille_max_par_annee$taille_moy[i]))
}
```

Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes:

```{r}
compte_nb_fois <- taille_max_par_annee |> 
  group_by(Sport)  |> 
  summarize(nb_fois = n()) |> 
  arrange(desc(nb_fois))

print(compte_nb_fois)
```

Le tableau ci-dessus permet de voir que le Basketball arrive en tête du classement avec 10 éditions où la taille moyenne des athlètes était la plus élevée.

### Question 12 :

En utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que "26 Juillet 2024". Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.

```{r}
texte <- "Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris."

regex_date <- "(\\d{1,2} \\w+ \\d{4})"

dates <- str_extract_all(texte, regex_date)

print(dates)

date <- c("5 Août 2016", "20 Août 2016", "23 Juillet 2021", "8 Août 2021", "26 Juillet 2024", "11 Août 2024")
```

J'ajoute un vecteur "date" contenant les mêmes dates créé manuellement car je ne parvient pas à faire la question suivante avec l'objet "dates".

### Question 13 :

Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace.

```{r}
mois <- c("Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre")
numeros_mois <- sprintf("\\b%s\\b", paste(seq_along(mois), collapse = "|"))
dates_modifiees <- str_replace_all(date, setNames(as.character(seq_along(mois)), mois), fixed(numeros_mois))

print(dates_modifiees)
```

### Question 14 :

Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.

```{r}
dates_converties <- dmy(dates_modifiees)

print(dates_converties)
str(dates_converties)
```

### Question 15 :

Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.

```{r}
date_rio <- dates_converties[2]
date_tokyo <- dates_converties[4]
date_paris <- dates_converties[6]

# Calcul du nombre de jours entre Rio et Tokyo
jours_entre_rio_et_tokyo <- as.numeric(difftime(date_tokyo, date_rio, units = "days"))

# Calcul du nombre de jours entre Tokyo et Paris
jours_entre_tokyo_et_paris <- as.numeric(difftime(date_paris, date_tokyo, units = "days"))

# Affichage du nombre de jours
print(paste("Nombre de jours entre Rio et Tokyo:", jours_entre_rio_et_tokyo))
print(paste("Nombre de jours entre Tokyo et Paris:", jours_entre_tokyo_et_paris))

# Conversion en semaines
semaines_entre_rio_et_tokyo <- jours_entre_rio_et_tokyo / 7
semaines_entre_tokyo_et_paris <- jours_entre_tokyo_et_paris / 7

# Affichage du nombre de semaines
print(paste("Nombre de semaines entre Rio et Tokyo:", semaines_entre_rio_et_tokyo))
print(paste("Nombre de semaines entre Tokyo et Paris:", semaines_entre_tokyo_et_paris))
```
