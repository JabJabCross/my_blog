---
title: "TD2"
format: html
editor: visual
---

# TD2

```{r}
library(rvest)
library(purrr)
library(tidyverse)
```

## Question 1 :

Lancez la commande suivante :

```{r}
list_tables <-
  session("https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques") |>
  html_elements(".wikitable") |>
    html_table()
```

Que s'est-il passé ? Que contient l'objet list_tables ? Cette commande a assignée des informations contenues dans une page wikipedia à un objet nommé list_tables. Cet objet contient une liste de 6 tibbles, ces derniers contiennent des informations sur des disciplines olympiques.

## Question 2 :

Nous allons tout d'abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n'est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or"). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d'entiers.

```{r}
data_medailles_sport_ete <- list_tables[[1]]
data_medailles_sport_ete <- data_medailles_sport_ete[, -1]
data_medailles_sport_ete <- data_medailles_sport_ete[-1,]
colnames(data_medailles_sport_ete) <- NULL
colnames(data_medailles_sport_ete) <- c("Discipline", "Annees", 
                                        "Editions", "Epreuves_2020", "Or",
                                        "Argent", "Bronze", "Total",
                                        "Athletes_medailles","Athletes_or")

lapply(c(data_medailles_sport_ete$Editions, data_medailles_sport_ete$Epreuves_2020,
         data_medailles_sport_ete$Or, data_medailles_sport_ete$Argent,
         data_medailles_sport_ete$Bronze, data_medailles_sport_ete$Total), as.integer)

colonnes_int <- c("Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total")
data_medailles_sport_ete[colonnes_int] <- lapply(data_medailles_sport_ete[colonnes_int], as.integer)
str(data_medailles_sport_ete)
```

## Question 3 :

Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l'histoire des jeux olympiques ?

```{r}
data_medailles_sport_ete |> arrange(desc(Total)) |> head(3)
```

Les disciplines ayant distribués le plus de médailles distribués sont donc l'athlétisme en première position, suivi par la natation et la lutte.

## Question 4 :

Quelles sont les disciplines avec le moins d'épreuves en 2020 ?

```{r}
moins_epreuve <- data_medailles_sport_ete |>  filter( Epreuves_2020 == min(Epreuves_2020))
print(moins_epreuve)
```

Les 8 disciplines affichées ci dessus sont celles avec le moins d'épreuves pour 2020. Ces dernières n'en auront que 2 chacunes.

## Question 5 :

La colonne Editions nous renseigne sur le nombre total d'apparence des disciplines aux JO d'été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.

```{r}
calcul_nb_editions_int <- function(depuis){
  nb_apparences <- (2024 - depuis) / 4
  if (depuis < 1917){
    nb_apparences <- nb_apparences - 3
  } else if (depuis >= 1917 & depuis <= 1940){
    nb_apparences <- nb_apparences - 2
  } else if (depuis >= 1941 & depuis <= 1944){
    nb_apparences <- nb_apparences - 1
  }
  return(nb_apparences)
}
calcul_nb_editions_int(1980)
```

Cette fonction permet de mesurer le nombre d'apparition des disciplines au JO en sachant que les éditions de 1916, 1940 et 1944 n'ont pas eu lieu pour cause de guerre mondiale. Cette fonction marche uniquement pour les disciplines ayant apparuent régulièrement et uniquement depuis leur première apparition.

## Question 6 :

Dans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères.

```{r}
calcul_nb_editions_str <- function(chaine_cara){
  addition1=0
  addition2=0
  soustraction1 = 0
  soustraction2 = 0
  soustraction3 = 0
  date_origine = 0
  result = 0
 vecteur_date <- unlist(str_split(chaine_cara, ","))
 for (i in seq_along(vecteur_date)){
   if (grepl("-", vecteur_date[i])){
     addition1 = addition1 + (as.numeric(substr(vecteur_date[i], start = 5, stop = 9))
                              - as.numeric(substr(vecteur_date[[i]], start = 1, stop = 4))) / 4
     if ((as.numeric(substr(vecteur_date[[i]], start = 1, stop = 4))) > 1917 & (as.numeric(substr(vecteur_date[i], start = 5, stop = 9)) 
  
         
     }else if(grepl("depuis", vecteur_date[i])){
     date_origine = as.numeric(substr(vecteur_date[i], start = 9, stop = 12))
     parutions_theoriques = (2024 - date_origine)/4
     if (date_origine < 1917){
       soustraction1 <- soustraction1 + 3
     } else if (date_origine >= 1917 & date_origine <= 1940){
       soustraction2 <- soustraction2 + 2
     } else if (date_origine >= 1941 & date_origine <= 1944){
       soustraction3 <- soustraction3 + 1
     }
   }else{
     addition2 = addition2 + 1
   }
 }

 result = parutions_theoriques + addition1 + addition2 - soustraction1 - soustraction2 - soustraction3
 return(result)
}

calcul_nb_editions_str("1896, 1904, depuis 1920")
```

Cette fois, la fonction prend pour argument des chaines de caractères. De plus, elle renvoie bien 26 lorqu'on lui passe l'argument : "1896, 1904, depuis 1920".

## Question 7 :

Définissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et 'calcul_nb_editions.character.

```{r}

```
