[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "Cette fonction permet d’obtenir les prévisions météorologiques en fonction de l’entrée fournie, qui peut être une adresse de type character ou des coordonnées géographiques de type numeric de taille 2. Si une adresse est fournie, elle est convertie en coordonnées géographiques à l’aide de la fonction get_forecast.character. Si des coordonnées géographiques sont fournies, elles sont utilisées directement. Ensuite, les prévisions météorologiques sont obtenues à partir des coordonnées géographiques à l’aide de la fonction get_forecast.numeric.\nAvant de pouvoir installer un package directement depuis GitHub, vous devez vous assurer que le package remotes est installé sur votre système. Si ce n’est pas le cas, vous pouvez l’installer en exécutant la commande suivante :\n\ninstall.packages(\"remotes\")\n\nUne fois que le package remotes est installé, vous pouvez utiliser sa fonction install_github() pour installer un package directement depuis GitHub. Voici comment vous pouvez le faire :\n\nremotes::install_github(\"JabJabCross/olympicsWeather\")\n\n\n\n\nmeteo_SdF &lt;- olympicsWeather::get_forecast(\"stade de France\")\nview(meteo_SdF)\n\nLe bloc de code ci-dessus permet ainsi de faire s’afficher les prévisions météos à 7 jours pour le stade de France.\n\n\n\n\nmeteo_Tahiti &lt;- olympicsWeather::get_forecast(\"Tahiti\")\nview(meteo_Tahiti)\n\nOn peut appliquer la même méthode pour obtenir les prévisions météos de Tahiti.\n\n\n\n\nmeteo_GPS &lt;- olympicsWeather::get_forecast(c(43.276703, 5.334791))\nview(meteo_GPS)\n\nCette fois, on applique la fonction à des coordonnées GPS."
  },
  {
    "objectID": "posts/post-with-code/index.html#librairie-olympicsweather",
    "href": "posts/post-with-code/index.html#librairie-olympicsweather",
    "title": "Post With Code",
    "section": "",
    "text": "Cette fonction permet d’obtenir les prévisions météorologiques en fonction de l’entrée fournie, qui peut être une adresse de type character ou des coordonnées géographiques de type numeric de taille 2. Si une adresse est fournie, elle est convertie en coordonnées géographiques à l’aide de la fonction get_forecast.character. Si des coordonnées géographiques sont fournies, elles sont utilisées directement. Ensuite, les prévisions météorologiques sont obtenues à partir des coordonnées géographiques à l’aide de la fonction get_forecast.numeric.\nAvant de pouvoir installer un package directement depuis GitHub, vous devez vous assurer que le package remotes est installé sur votre système. Si ce n’est pas le cas, vous pouvez l’installer en exécutant la commande suivante :\n\ninstall.packages(\"remotes\")\n\nUne fois que le package remotes est installé, vous pouvez utiliser sa fonction install_github() pour installer un package directement depuis GitHub. Voici comment vous pouvez le faire :\n\nremotes::install_github(\"JabJabCross/olympicsWeather\")\n\n\n\n\nmeteo_SdF &lt;- olympicsWeather::get_forecast(\"stade de France\")\nview(meteo_SdF)\n\nLe bloc de code ci-dessus permet ainsi de faire s’afficher les prévisions météos à 7 jours pour le stade de France.\n\n\n\n\nmeteo_Tahiti &lt;- olympicsWeather::get_forecast(\"Tahiti\")\nview(meteo_Tahiti)\n\nOn peut appliquer la même méthode pour obtenir les prévisions météos de Tahiti.\n\n\n\n\nmeteo_GPS &lt;- olympicsWeather::get_forecast(c(43.276703, 5.334791))\nview(meteo_GPS)\n\nCette fois, on applique la fonction à des coordonnées GPS."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html",
    "href": "posts/TP semaine 1/TD1.html",
    "title": "TD1",
    "section": "",
    "text": "Lisez le fichier téléchargé (ou directement depuis le site, cf aide plus bas) avec la fonction read.table. Le résultat sera affecté à l’objet de nom data_ex. Le jeux de données contient 4 colonnes. Quels sont les noms et la nature des colonnes ? Combien de lignes contient la data.frame ?\n\ndata_ex &lt;- read.csv2(\"data/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\")\nprint(str(data_ex))\n\n'data.frame':   31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.751095, 2.0759\" \"48.788046, 2.034987\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Golf national\" \"Vélodrome National de Saint-Quentin-en-Yvelines\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"Site olympique\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"Golf\" \"Cyclisme sur piste,Para cyclisme sur piste\" ...\nNULL\n\nprint(nrow(data_ex))\n\n[1] 31\n\n\n\n\n\nCombien y a t’il de sites olympiques ?\n\nnb_olymp &lt;- sum(grepl(\"Site olympique\", data_ex$sites_olympiques_paralympiques))\nprint(nb_olymp)\n\n[1] 26\n\n\nIl y a donc 26 sites olympiques.\n\n\n\nCombien y a t’il de sites paralympiques ?\n\nnb_para &lt;- sum(grepl(\"Site paralympique\", data_ex$sites_olympiques_paralympiques))\nprint(nb_para)\n\n[1] 19\n\n\nIl y a 19 sites paralypmiques.\n\n\n\nQuels sont les sites qui accueillent plusieurs disciplines sportives ?\n\nplusieurs &lt;- c()\n\nfor (i in 1:31) {\n  if (grepl(\",\", data_ex$sports[i])) {\n    plusieurs &lt;- c(plusieurs, data_ex$nom[i])\n  }\n}\nprint(plusieurs)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\nTous les sites affichés ci-dessus acceuillent plusieurs disciplines sportives.\n\n\n\nQuels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\ndiscip_para &lt;- c()\n\nfor (i in 1:70) {\n  sports_liste &lt;- unlist(strsplit(data_ex$sports, \",\"))\n  if (grepl(\"Para|fauteuil\", sports_liste[[i]])) {\n    discip_para &lt;- c(discip_para, sports_liste[[i]])\n  }\n}\nprint(discip_para)\n\n [1] \"Para athlétisme\"         \"Para cyclisme sur piste\"\n [3] \"Tennis fauteuil\"         \"Para cyclisme sur route\"\n [5] \"Para tennis de table\"    \"Basket fauteuil\"        \n [7] \"Para judo\"               \"Rugby fauteuil\"         \n [9] \"Para natation\"           \"Para canoë\"             \n[11] \"Para aviron\"             \"Para Badminton\"         \n[13] \"Para powerlifting\"       \"Para équitation\"        \n[15] \"Para athlétisme\"         \"Escrime fauteuil\"       \n[17] \"Para taekwondo\"          \"Para tir à l'arc\"       \n\n\nLes disciplines paralympiques ci-dessus sont celles acceuills sur ces sites franciliens.\n\n\n\nQuel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\nlibrary(stringr)\nnb_discip &lt;- c()\nnb_discip = str_count(data_ex$sports, \",\") + 1\n\nindices_max_discip &lt;- which(nb_discip == max(nb_discip))\n\n\nfor (i in 1:length(indices_max_discip)){\n  print(data_ex$nom[[indices_max_discip[[i]]]])\n}\n\n[1] \"Arena Bercy\"\n[1] \"Arena Paris nord\"\n[1] \"Stade de la Concorde\"\n[1] \"Arena Champs de Mars\"\n[1] \"Stade nautique\"\n[1] \"Arena La Chapelle\"\n[1] \"Grand Palais\"\n[1] \"Invalides\"\n\n\nLes sites affichés ci-dessus sont ceux acceuillant le plus de disciplines différentes.\n\n\n\nQuel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\nnb_acceuil &lt;- c()\n\nfor (i in 1:length(sports_liste)){\n  nb_acceuil &lt;- c(nb_acceuil, sum(str_count(data_ex$sports, sports_liste[[i]])))\n  }\n\nindices_max_acceuil &lt;- which(nb_acceuil == max(nb_acceuil))\n\nmax_acceuil &lt;- c()\nfor (i in 1:length(indices_max_acceuil)){\n  max_acceuil &lt;- c(max_acceuil, sports_liste[[i]])\n}\nprint(max_acceuil)#Sport qui sont acceuillis dans le plus de sites différents \n\n[1] \"Football\"        \"Athlétisme\"      \"Para athlétisme\" \"Rugby\"          \n\nsites_max_acceuil &lt;- c()\n\nfor (i in 1:31){\n  for (j in 1:length(max_acceuil)){ \n  if (grepl(max_acceuil[[j]], data_ex$sports[i])){\n    sites_max_acceuil &lt;- c(sites_max_acceuil, data_ex$nom[[i]])\n    break\n  }\n}\n}\nprint(sites_max_acceuil) #Sites acceuillant ces sports\n\n[1] \"Parc des Princes\"                    \"Stade de France\"                    \n[3] \"Hôtel de ville de Paris\"             \"Pont d'Iéna\"                        \n[5] \"Arena Champs de Mars\"                \"Terrain des Essences - La Courneuve\"\n[7] \"Invalides\"                          \n\n\nLe football, l’athlétisme, le para athlétisme ainsi que le rugby sont les disciplines ayant lieu sur le plus de sites différents. Ces sites sont le Parc des Princes, l’Hôtel de ville de Paris, l’Arena Champs de Mars, les Invalides, le Stade de France, le Pont d’Iéna et le Terrain des Essences à la Courneuve.\n\n\n\nA vol d’oiseau, quels sont les sites les deux sites les plus proches ?\n\nlibrary(geosphere)\npoints &lt;- strsplit(data_ex$geo_point, \",\")\n\nmin_distance &lt;- 100000000000\nsite1 &lt;- 0\nsite2 &lt;- 0\n\n\nfor (i in 1:(length(data_ex$geo_point) - 1)) {\n  for (j in (i+1):length(data_ex$geo_point)) {\n    distance  &lt;- distHaversine(as.numeric(points[[i]]), as.numeric(points[[j]]))\n    if (distance &lt; min_distance) {\n      min_distance &lt;- distance\n      site1 &lt;- data_ex$nom[[i]]\n      site2 &lt;- data_ex$nom[[j]]\n    }\n  }\n}\nprint(site1)\n\n[1] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n\nprint(site2)\n\n[1] \"Stade BMX de Saint-Quentin-en-Yvelines\"\n\n\nLe Vélodrome National de Saint-Quentin-en-Yvelines et le Stade BMX de Saint-Quentin-en-Yvelines sont donc les sites les plus proches à vol d’oiseau.\n\n\n\nQuels sont les deux sites les plus éloignés ?\n\nmax_distance &lt;- 0\nsite3 &lt;- 0\nsite4 &lt;- 0\n\n\nfor (i in 1:(length(data_ex$geo_point) - 1)) {\n  for (j in (i+1):length(data_ex$geo_point)) {\n    distance  &lt;- distHaversine(as.numeric(points[[i]]), as.numeric(points[[j]]))\n    if (distance &gt; max_distance) {\n      max_distance &lt;- distance\n      site3 &lt;- data_ex$nom[[i]]\n      site4 &lt;- data_ex$nom[[j]]\n    }\n  }\n}\nprint(site3)\n\n[1] \"Stade nautique\"\n\nprint(site4)\n\n[1] \"Colline d'Elancourt\"\n\n\nTandis que le Stafe nautique et la Colline d’Elancourt sont ceux les plus éloignés.\n\n\n\nVous êtes un heureux millionaire et souhaitez investir dans un bien immobilier. Vous décidez d’acheter un appartement situé au barycentre de l’ensemble des sites olympiques. Où se situe cet appartement ?\n\nlibrary(tidygeocoder)\n\nsomme_longitude &lt;- 0\nsomme_latitude &lt;- 0\n\nfor (i in 1:length(data_ex$geo_point)){ \ncoord &lt;- unlist(strsplit(data_ex$geo_point[[i]], \", \"))\nsomme_latitude &lt;- somme_latitude + as.numeric(coord[1])\nsomme_longitude &lt;- somme_longitude + as.numeric(coord[2])\n}\nsomme_longitude\n\n[1] 71.22466\n\nsomme_latitude\n\n[1] 1514.872\n\nlongitude_bien_immo = somme_longitude/length(data_ex$geo_point)\nlatitude_bien_immo = somme_latitude/length(data_ex$geo_point)                                             \n\ncoord_bien_immo &lt;- data.frame(latitude_bien_immo, longitude_bien_immo)\nadresse &lt;- reverse_geocode(coord_bien_immo, latitude_bien_immo, longitude_bien_immo)\n\nPassing 1 coordinate to the Nominatim single coordinate geocoder\n\n\nQuery completed in: 1 seconds\n\nprint(adresse$address)\n\n[1] \"23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France\"\n\n\nL’addresse du barycentres de tous ces sites est alors “23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France”."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-2",
    "href": "posts/TP semaine 1/TD1.html#question-2",
    "title": "TD1",
    "section": "",
    "text": "Lisez le fichier téléchargé (ou directement depuis le site, cf aide plus bas) avec la fonction read.table. Le résultat sera affecté à l’objet de nom data_ex. Le jeux de données contient 4 colonnes. Quels sont les noms et la nature des colonnes ? Combien de lignes contient la data.frame ?\n\ndata_ex &lt;- read.csv2(\"data/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\")\nprint(str(data_ex))\n\n'data.frame':   31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.751095, 2.0759\" \"48.788046, 2.034987\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Golf national\" \"Vélodrome National de Saint-Quentin-en-Yvelines\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"Site olympique\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"Golf\" \"Cyclisme sur piste,Para cyclisme sur piste\" ...\nNULL\n\nprint(nrow(data_ex))\n\n[1] 31"
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-3",
    "href": "posts/TP semaine 1/TD1.html#question-3",
    "title": "TD1",
    "section": "",
    "text": "Combien y a t’il de sites olympiques ?\n\nnb_olymp &lt;- sum(grepl(\"Site olympique\", data_ex$sites_olympiques_paralympiques))\nprint(nb_olymp)\n\n[1] 26\n\n\nIl y a donc 26 sites olympiques."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-4",
    "href": "posts/TP semaine 1/TD1.html#question-4",
    "title": "TD1",
    "section": "",
    "text": "Combien y a t’il de sites paralympiques ?\n\nnb_para &lt;- sum(grepl(\"Site paralympique\", data_ex$sites_olympiques_paralympiques))\nprint(nb_para)\n\n[1] 19\n\n\nIl y a 19 sites paralypmiques."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-5",
    "href": "posts/TP semaine 1/TD1.html#question-5",
    "title": "TD1",
    "section": "",
    "text": "Quels sont les sites qui accueillent plusieurs disciplines sportives ?\n\nplusieurs &lt;- c()\n\nfor (i in 1:31) {\n  if (grepl(\",\", data_ex$sports[i])) {\n    plusieurs &lt;- c(plusieurs, data_ex$nom[i])\n  }\n}\nprint(plusieurs)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\nTous les sites affichés ci-dessus acceuillent plusieurs disciplines sportives."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-6",
    "href": "posts/TP semaine 1/TD1.html#question-6",
    "title": "TD1",
    "section": "",
    "text": "Quels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\ndiscip_para &lt;- c()\n\nfor (i in 1:70) {\n  sports_liste &lt;- unlist(strsplit(data_ex$sports, \",\"))\n  if (grepl(\"Para|fauteuil\", sports_liste[[i]])) {\n    discip_para &lt;- c(discip_para, sports_liste[[i]])\n  }\n}\nprint(discip_para)\n\n [1] \"Para athlétisme\"         \"Para cyclisme sur piste\"\n [3] \"Tennis fauteuil\"         \"Para cyclisme sur route\"\n [5] \"Para tennis de table\"    \"Basket fauteuil\"        \n [7] \"Para judo\"               \"Rugby fauteuil\"         \n [9] \"Para natation\"           \"Para canoë\"             \n[11] \"Para aviron\"             \"Para Badminton\"         \n[13] \"Para powerlifting\"       \"Para équitation\"        \n[15] \"Para athlétisme\"         \"Escrime fauteuil\"       \n[17] \"Para taekwondo\"          \"Para tir à l'arc\"       \n\n\nLes disciplines paralympiques ci-dessus sont celles acceuills sur ces sites franciliens."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-7",
    "href": "posts/TP semaine 1/TD1.html#question-7",
    "title": "TD1",
    "section": "",
    "text": "Quel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\nlibrary(stringr)\nnb_discip &lt;- c()\nnb_discip = str_count(data_ex$sports, \",\") + 1\n\nindices_max_discip &lt;- which(nb_discip == max(nb_discip))\n\n\nfor (i in 1:length(indices_max_discip)){\n  print(data_ex$nom[[indices_max_discip[[i]]]])\n}\n\n[1] \"Arena Bercy\"\n[1] \"Arena Paris nord\"\n[1] \"Stade de la Concorde\"\n[1] \"Arena Champs de Mars\"\n[1] \"Stade nautique\"\n[1] \"Arena La Chapelle\"\n[1] \"Grand Palais\"\n[1] \"Invalides\"\n\n\nLes sites affichés ci-dessus sont ceux acceuillant le plus de disciplines différentes."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-8",
    "href": "posts/TP semaine 1/TD1.html#question-8",
    "title": "TD1",
    "section": "",
    "text": "Quel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\nnb_acceuil &lt;- c()\n\nfor (i in 1:length(sports_liste)){\n  nb_acceuil &lt;- c(nb_acceuil, sum(str_count(data_ex$sports, sports_liste[[i]])))\n  }\n\nindices_max_acceuil &lt;- which(nb_acceuil == max(nb_acceuil))\n\nmax_acceuil &lt;- c()\nfor (i in 1:length(indices_max_acceuil)){\n  max_acceuil &lt;- c(max_acceuil, sports_liste[[i]])\n}\nprint(max_acceuil)#Sport qui sont acceuillis dans le plus de sites différents \n\n[1] \"Football\"        \"Athlétisme\"      \"Para athlétisme\" \"Rugby\"          \n\nsites_max_acceuil &lt;- c()\n\nfor (i in 1:31){\n  for (j in 1:length(max_acceuil)){ \n  if (grepl(max_acceuil[[j]], data_ex$sports[i])){\n    sites_max_acceuil &lt;- c(sites_max_acceuil, data_ex$nom[[i]])\n    break\n  }\n}\n}\nprint(sites_max_acceuil) #Sites acceuillant ces sports\n\n[1] \"Parc des Princes\"                    \"Stade de France\"                    \n[3] \"Hôtel de ville de Paris\"             \"Pont d'Iéna\"                        \n[5] \"Arena Champs de Mars\"                \"Terrain des Essences - La Courneuve\"\n[7] \"Invalides\"                          \n\n\nLe football, l’athlétisme, le para athlétisme ainsi que le rugby sont les disciplines ayant lieu sur le plus de sites différents. Ces sites sont le Parc des Princes, l’Hôtel de ville de Paris, l’Arena Champs de Mars, les Invalides, le Stade de France, le Pont d’Iéna et le Terrain des Essences à la Courneuve."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-9",
    "href": "posts/TP semaine 1/TD1.html#question-9",
    "title": "TD1",
    "section": "",
    "text": "A vol d’oiseau, quels sont les sites les deux sites les plus proches ?\n\nlibrary(geosphere)\npoints &lt;- strsplit(data_ex$geo_point, \",\")\n\nmin_distance &lt;- 100000000000\nsite1 &lt;- 0\nsite2 &lt;- 0\n\n\nfor (i in 1:(length(data_ex$geo_point) - 1)) {\n  for (j in (i+1):length(data_ex$geo_point)) {\n    distance  &lt;- distHaversine(as.numeric(points[[i]]), as.numeric(points[[j]]))\n    if (distance &lt; min_distance) {\n      min_distance &lt;- distance\n      site1 &lt;- data_ex$nom[[i]]\n      site2 &lt;- data_ex$nom[[j]]\n    }\n  }\n}\nprint(site1)\n\n[1] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n\nprint(site2)\n\n[1] \"Stade BMX de Saint-Quentin-en-Yvelines\"\n\n\nLe Vélodrome National de Saint-Quentin-en-Yvelines et le Stade BMX de Saint-Quentin-en-Yvelines sont donc les sites les plus proches à vol d’oiseau."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-10",
    "href": "posts/TP semaine 1/TD1.html#question-10",
    "title": "TD1",
    "section": "",
    "text": "Quels sont les deux sites les plus éloignés ?\n\nmax_distance &lt;- 0\nsite3 &lt;- 0\nsite4 &lt;- 0\n\n\nfor (i in 1:(length(data_ex$geo_point) - 1)) {\n  for (j in (i+1):length(data_ex$geo_point)) {\n    distance  &lt;- distHaversine(as.numeric(points[[i]]), as.numeric(points[[j]]))\n    if (distance &gt; max_distance) {\n      max_distance &lt;- distance\n      site3 &lt;- data_ex$nom[[i]]\n      site4 &lt;- data_ex$nom[[j]]\n    }\n  }\n}\nprint(site3)\n\n[1] \"Stade nautique\"\n\nprint(site4)\n\n[1] \"Colline d'Elancourt\"\n\n\nTandis que le Stafe nautique et la Colline d’Elancourt sont ceux les plus éloignés."
  },
  {
    "objectID": "posts/TP semaine 1/TD1.html#question-11",
    "href": "posts/TP semaine 1/TD1.html#question-11",
    "title": "TD1",
    "section": "",
    "text": "Vous êtes un heureux millionaire et souhaitez investir dans un bien immobilier. Vous décidez d’acheter un appartement situé au barycentre de l’ensemble des sites olympiques. Où se situe cet appartement ?\n\nlibrary(tidygeocoder)\n\nsomme_longitude &lt;- 0\nsomme_latitude &lt;- 0\n\nfor (i in 1:length(data_ex$geo_point)){ \ncoord &lt;- unlist(strsplit(data_ex$geo_point[[i]], \", \"))\nsomme_latitude &lt;- somme_latitude + as.numeric(coord[1])\nsomme_longitude &lt;- somme_longitude + as.numeric(coord[2])\n}\nsomme_longitude\n\n[1] 71.22466\n\nsomme_latitude\n\n[1] 1514.872\n\nlongitude_bien_immo = somme_longitude/length(data_ex$geo_point)\nlatitude_bien_immo = somme_latitude/length(data_ex$geo_point)                                             \n\ncoord_bien_immo &lt;- data.frame(latitude_bien_immo, longitude_bien_immo)\nadresse &lt;- reverse_geocode(coord_bien_immo, latitude_bien_immo, longitude_bien_immo)\n\nPassing 1 coordinate to the Nominatim single coordinate geocoder\n\n\nQuery completed in: 1 seconds\n\nprint(adresse$address)\n\n[1] \"23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France\"\n\n\nL’addresse du barycentres de tous ces sites est alors “23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France”."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue sur mon Blog",
    "section": "",
    "text": "Voila le premier post de mon premier Blog sur R.\n\n\n\nça fait rêver !"
  },
  {
    "objectID": "posts/TP semaine 2/TD2.html",
    "href": "posts/TP semaine 2/TD2.html",
    "title": "TD2",
    "section": "",
    "text": "library(rvest)\nlibrary(purrr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()         masks stats::filter()\n✖ readr::guess_encoding() masks rvest::guess_encoding()\n✖ dplyr::lag()            masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nLancez la commande suivante :\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n    html_table()\n\nQue s’est-il passé ? Que contient l’objet list_tables ? Cette commande a assignée des informations contenues dans une page wikipedia à un objet nommé list_tables. Cet objet contient une liste de 6 tibbles, ces derniers contiennent des informations sur des disciplines olympiques.\n\n\n\nNous allons tout d’abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(“Discipline”, “Annees”, “Editions”, “Epreuves_2020”, “Or”, “Argent”, “Bronze”, “Total”, “Athletes_medailles”, “Athletes_or”). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\ndata_medailles_sport_ete &lt;- list_tables[[1]]\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[, -1]\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[-1,]\ncolnames(data_medailles_sport_ete) &lt;- NULL\ncolnames(data_medailles_sport_ete) &lt;- c(\"Discipline\", \"Annees\", \n                                        \"Editions\", \"Epreuves_2020\", \"Or\",\n                                        \"Argent\", \"Bronze\", \"Total\",\n                                        \"Athletes_medailles\",\"Athletes_or\")\n\nlapply(c(data_medailles_sport_ete$Editions, data_medailles_sport_ete$Epreuves_2020,\n         data_medailles_sport_ete$Or, data_medailles_sport_ete$Argent,\n         data_medailles_sport_ete$Bronze, data_medailles_sport_ete$Total), as.integer)\n\n[[1]]\n[1] 29\n\n[[2]]\n[1] 28\n\n[[3]]\n[1] 8\n\n[[4]]\n[1] 20\n\n[[5]]\n[1] 26\n\n[[6]]\n[1] 20\n\n[[7]]\n[1] 29\n\n[[8]]\n[1] 26\n\n[[9]]\n[1] 29\n\n[[10]]\n[1] 27\n\n[[11]]\n[1] 4\n\n[[12]]\n[1] 29\n\n[[13]]\n[1] 14\n\n[[14]]\n[1] 26\n\n[[15]]\n[1] 24\n\n[[16]]\n[1] 14\n\n[[17]]\n[1] 28\n\n[[18]]\n[1] 29\n\n[[19]]\n[1] 10\n\n[[20]]\n[1] 25\n\n[[21]]\n[1] 27\n\n[[22]]\n[1] 6\n\n[[23]]\n[1] 16\n\n[[24]]\n[1] 9\n\n[[25]]\n[1] 27\n\n[[26]]\n[1] 17\n\n[[27]]\n[1] 6\n\n[[28]]\n[1] 27\n\n[[29]]\n[1] 15\n\n[[30]]\n[1] 26\n\n[[31]]\n[1] 48\n\n[[32]]\n[1] 14\n\n[[33]]\n[1] 5\n\n[[34]]\n[1] 4\n\n[[35]]\n[1] 13\n\n[[36]]\n[1] 16\n\n[[37]]\n[1] 22\n\n[[38]]\n[1] 6\n\n[[39]]\n[1] 12\n\n[[40]]\n[1] 2\n\n[[41]]\n[1] 2\n\n[[42]]\n[1] 18\n\n[[43]]\n[1] 2\n\n[[44]]\n[1] 14\n\n[[45]]\n[1] 2\n\n[[46]]\n[1] 15\n\n[[47]]\n[1] 18\n\n[[48]]\n[1] 37\n\n[[49]]\n[1] 2\n\n[[50]]\n[1] 2\n\n[[51]]\n[1] 8\n\n[[52]]\n[1] 8\n\n[[53]]\n[1] 5\n\n[[54]]\n[1] 5\n\n[[55]]\n[1] 15\n\n[[56]]\n[1] 5\n\n[[57]]\n[1] 3\n\n[[58]]\n[1] 10\n\n[[59]]\n[1] 2\n\n[[60]]\n[1] 2\n\n[[61]]\n[1] 1028\n\n[[62]]\n[1] 269\n\n[[63]]\n[1] 39\n\n[[64]]\n[1] 32\n\n[[65]]\n[1] 266\n\n[[66]]\n[1] 242\n\n[[67]]\n[1] 263\n\n[[68]]\n[1] 151\n\n[[69]]\n[1] 223\n\n[[70]]\n[1] 34\n\n[[71]]\n[1] 8\n\n[[72]]\n[1] 380\n\n[[73]]\n[1] 26\n\n[[74]]\n[1] 229\n\n[[75]]\n[1] 35\n\n[[76]]\n[1] 152\n\n[[77]]\n[1] 430\n\n[[78]]\n[1] 607\n\n[[79]]\n[1] 20\n\n[[80]]\n[1] 42\n\n[[81]]\n[1] 130\n\n[[82]]\n[1] 48\n\n[[83]]\n[1] 71\n\n[[84]]\n[1] 37\n\n[[85]]\n[1] 288\n\n[[86]]\n[1] 70\n\n[[87]]\n[1] 13\n\n[[88]]\n[1] 195\n\n[[89]]\n[1] 30\n\n[[90]]\n[1] 28\n\n[[91]]\n[1] 1030\n\n[[92]]\n[1] 268\n\n[[93]]\n[1] 39\n\n[[94]]\n[1] 32\n\n[[95]]\n[1] 266\n\n[[96]]\n[1] 241\n\n[[97]]\n[1] 261\n\n[[98]]\n[1] 149\n\n[[99]]\n[1] 223\n\n[[100]]\n[1] 34\n\n[[101]]\n[1] 8\n\n[[102]]\n[1] 361\n\n[[103]]\n[1] 26\n\n[[104]]\n[1] 225\n\n[[105]]\n[1] 35\n\n[[106]]\n[1] 151\n\n[[107]]\n[1] 429\n\n[[108]]\n[1] 604\n\n[[109]]\n[1] 18\n\n[[110]]\n[1] 42\n\n[[111]]\n[1] 130\n\n[[112]]\n[1] 48\n\n[[113]]\n[1] 72\n\n[[114]]\n[1] 37\n\n[[115]]\n[1] 289\n\n[[116]]\n[1] 69\n\n[[117]]\n[1] 13\n\n[[118]]\n[1] 185\n\n[[119]]\n[1] 30\n\n[[120]]\n[1] 28\n\n[[121]]\n[1] 1027\n\n[[122]]\n[1] 273\n\n[[123]]\n[1] 43\n\n[[124]]\n[1] 32\n\n[[125]]\n[1] 472\n\n[[126]]\n[1] 243\n\n[[127]]\n[1] 260\n\n[[128]]\n[1] 148\n\n[[129]]\n[1] 221\n\n[[130]]\n[1] 35\n\n[[131]]\n[1] 9\n\n[[132]]\n[1] 364\n\n[[133]]\n[1] 26\n\n[[134]]\n[1] 229\n\n[[135]]\n[1] 36\n\n[[136]]\n[1] 304\n\n[[137]]\n[1] 499\n\n[[138]]\n[1] 603\n\n[[139]]\n[1] 19\n\n[[140]]\n[1] 42\n\n[[141]]\n[1] 132\n\n[[142]]\n[1] 80\n\n[[143]]\n[1] 87\n\n[[144]]\n[1] 41\n\n[[145]]\n[1] 287\n\n[[146]]\n[1] 61\n\n[[147]]\n[1] 13\n\n[[148]]\n[1] 180\n\n[[149]]\n[1] 30\n\n[[150]]\n[1] 29\n\n[[151]]\n[1] 3085\n\n[[152]]\n[1] 810\n\n[[153]]\n[1] 121\n\n[[154]]\n[1] 96\n\n[[155]]\n[1] 1004\n\n[[156]]\n[1] 726\n\n[[157]]\n[1] 784\n\n[[158]]\n[1] 448\n\n[[159]]\n[1] 667\n\n[[160]]\n[1] 103\n\n[[161]]\n[1] 19\n\n[[162]]\n[1] 1105\n\n[[163]]\n[1] 78\n\n[[164]]\n[1] 683\n\n[[165]]\n[1] 106\n\n[[166]]\n[1] 607\n\n[[167]]\n[1] 1358\n\n[[168]]\n[1] 1814\n\n[[169]]\n[1] 57\n\n[[170]]\n[1] 126\n\n[[171]]\n[1] 392\n\n[[172]]\n[1] 176\n\n[[173]]\n[1] 230\n\n[[174]]\n[1] 115\n\n[[175]]\n[1] 864\n\n[[176]]\n[1] 200\n\n[[177]]\n[1] 39\n\n[[178]]\n[1] 560\n\n[[179]]\n[1] 90\n\n[[180]]\n[1] 85\n\ncolonnes_int &lt;- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\ndata_medailles_sport_ete[colonnes_int] &lt;- lapply(data_medailles_sport_ete[colonnes_int], as.integer)\n\n\n\n\nQuelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\ndata_medailles_sport_ete |&gt; arrange(desc(Total)) |&gt; head(3)\n\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                  &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes disciplines ayant distribués le plus de médailles distribués sont donc l’athlétisme en première position, suivi par la natation et la lutte.\n\n\n\nQuelles sont les disciplines avec le moins d’épreuves en 2020 ?\n\nmoins_epreuve &lt;- data_medailles_sport_ete |&gt;  dplyr::filter( Epreuves_2020 == min(Epreuves_2020))\nprint(moins_epreuve)\n\n# A tibble: 8 × 10\n  Discipline            Annees  Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                 &lt;chr&gt;      &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Football              1900–1…       27             2    34     34     35   103\n2 Golf                  1900–1…        4             2     8      8      9    19\n3 Handball              1936,d…       14             2    26     26     26    78\n4 Hockey sur gazon      1908, …       24             2    35     35     36   106\n5 Natation synchronisée Depuis…       10             2    20     18     19    57\n6 Pentathlon moderne    Depuis…       25             2    42     42     42   126\n7 Volley-ball           Depuis…       15             2    30     30     30    90\n8 Water polo            1900,d…       26             2    28     28     29    85\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes 8 disciplines affichées ci dessus sont celles avec le moins d’épreuves pour 2020. Ces dernières n’en auront que 2 chacunes.\n\n\n\nLa colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\ncalcul_nb_editions_int &lt;- function(depuis){\n  nb_apparences &lt;- (2024 - depuis) / 4\n  if (depuis &lt; 1917){\n    nb_apparences &lt;- nb_apparences - 3\n  } else if (depuis &gt;= 1917 & depuis &lt;= 1940){\n    nb_apparences &lt;- nb_apparences - 2\n  } else if (depuis &gt;= 1941 & depuis &lt;= 1944){\n    nb_apparences &lt;- nb_apparences - 1\n  }\n  return(nb_apparences)\n}\ncalcul_nb_editions_int(1980)\n\n[1] 11\n\n\nCette fonction permet de mesurer le nombre d’apparition des disciplines au JO en sachant que les éditions de 1916, 1940 et 1944 n’ont pas eu lieu pour cause de guerre mondiale. Cette fonction marche uniquement pour les disciplines ayant apparuent régulièrement et uniquement depuis leur première apparition.\n\n\n\nDans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères.\n\ncalcul_nb_editions_str &lt;- function(chaine_cara){\n  addition1=0\n  addition2=0\n  soustraction1 = 0\n  soustraction2 = 0\n  soustraction3 = 0\n  date_origine = 0\n  result = 0\n vecteur_date &lt;- unlist(str_split(chaine_cara, \",\"))\n for (i in seq_along(vecteur_date)){\n   if (grepl(\"-\", vecteur_date[i])){\n     addition1 = addition1 + (as.numeric(substr(vecteur_date[i], start = 5, stop = 9))\n                              - as.numeric(substr(vecteur_date[[i]], start = 1, stop = 4))) / 4\n   }else if(grepl(\"depuis\", vecteur_date[i])){\n     date_origine = as.numeric(substr(vecteur_date[i], start = 9, stop = 12))\n     parutions_theoriques = (2024 - date_origine)/4\n     if (date_origine &lt; 1917){\n       soustraction1 &lt;- soustraction1 + 3\n     } else if (date_origine &gt;= 1917 & date_origine &lt;= 1940){\n       soustraction2 &lt;- soustraction2 + 2\n     } else if (date_origine &gt;= 1941 & date_origine &lt;= 1944){\n       soustraction3 &lt;- soustraction3 + 1\n     }\n   }else{\n     addition2 = addition2 + 1\n   }\n }\n\n result = parutions_theoriques + addition1 + addition2 - soustraction1 - soustraction2 - soustraction3\n return(result)\n}\n\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\n[1] 26\n\n\nCette fois, la fonction prend pour argument des chaines de caractères. De plus, elle renvoie bien 26 lorqu’on lui passe l’argument : “1896, 1904, depuis 1920”."
  },
  {
    "objectID": "posts/TP semaine 2/TD2.html#question-1",
    "href": "posts/TP semaine 2/TD2.html#question-1",
    "title": "TD2",
    "section": "",
    "text": "Lancez la commande suivante :\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n    html_table()\n\nQue s’est-il passé ? Que contient l’objet list_tables ? Cette commande a assignée des informations contenues dans une page wikipedia à un objet nommé list_tables. Cet objet contient une liste de 6 tibbles, ces derniers contiennent des informations sur des disciplines olympiques."
  },
  {
    "objectID": "posts/TP semaine 2/TD2.html#question-2",
    "href": "posts/TP semaine 2/TD2.html#question-2",
    "title": "TD2",
    "section": "",
    "text": "Nous allons tout d’abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(“Discipline”, “Annees”, “Editions”, “Epreuves_2020”, “Or”, “Argent”, “Bronze”, “Total”, “Athletes_medailles”, “Athletes_or”). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\ndata_medailles_sport_ete &lt;- list_tables[[1]]\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[, -1]\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[-1,]\ncolnames(data_medailles_sport_ete) &lt;- NULL\ncolnames(data_medailles_sport_ete) &lt;- c(\"Discipline\", \"Annees\", \n                                        \"Editions\", \"Epreuves_2020\", \"Or\",\n                                        \"Argent\", \"Bronze\", \"Total\",\n                                        \"Athletes_medailles\",\"Athletes_or\")\n\nlapply(c(data_medailles_sport_ete$Editions, data_medailles_sport_ete$Epreuves_2020,\n         data_medailles_sport_ete$Or, data_medailles_sport_ete$Argent,\n         data_medailles_sport_ete$Bronze, data_medailles_sport_ete$Total), as.integer)\n\n[[1]]\n[1] 29\n\n[[2]]\n[1] 28\n\n[[3]]\n[1] 8\n\n[[4]]\n[1] 20\n\n[[5]]\n[1] 26\n\n[[6]]\n[1] 20\n\n[[7]]\n[1] 29\n\n[[8]]\n[1] 26\n\n[[9]]\n[1] 29\n\n[[10]]\n[1] 27\n\n[[11]]\n[1] 4\n\n[[12]]\n[1] 29\n\n[[13]]\n[1] 14\n\n[[14]]\n[1] 26\n\n[[15]]\n[1] 24\n\n[[16]]\n[1] 14\n\n[[17]]\n[1] 28\n\n[[18]]\n[1] 29\n\n[[19]]\n[1] 10\n\n[[20]]\n[1] 25\n\n[[21]]\n[1] 27\n\n[[22]]\n[1] 6\n\n[[23]]\n[1] 16\n\n[[24]]\n[1] 9\n\n[[25]]\n[1] 27\n\n[[26]]\n[1] 17\n\n[[27]]\n[1] 6\n\n[[28]]\n[1] 27\n\n[[29]]\n[1] 15\n\n[[30]]\n[1] 26\n\n[[31]]\n[1] 48\n\n[[32]]\n[1] 14\n\n[[33]]\n[1] 5\n\n[[34]]\n[1] 4\n\n[[35]]\n[1] 13\n\n[[36]]\n[1] 16\n\n[[37]]\n[1] 22\n\n[[38]]\n[1] 6\n\n[[39]]\n[1] 12\n\n[[40]]\n[1] 2\n\n[[41]]\n[1] 2\n\n[[42]]\n[1] 18\n\n[[43]]\n[1] 2\n\n[[44]]\n[1] 14\n\n[[45]]\n[1] 2\n\n[[46]]\n[1] 15\n\n[[47]]\n[1] 18\n\n[[48]]\n[1] 37\n\n[[49]]\n[1] 2\n\n[[50]]\n[1] 2\n\n[[51]]\n[1] 8\n\n[[52]]\n[1] 8\n\n[[53]]\n[1] 5\n\n[[54]]\n[1] 5\n\n[[55]]\n[1] 15\n\n[[56]]\n[1] 5\n\n[[57]]\n[1] 3\n\n[[58]]\n[1] 10\n\n[[59]]\n[1] 2\n\n[[60]]\n[1] 2\n\n[[61]]\n[1] 1028\n\n[[62]]\n[1] 269\n\n[[63]]\n[1] 39\n\n[[64]]\n[1] 32\n\n[[65]]\n[1] 266\n\n[[66]]\n[1] 242\n\n[[67]]\n[1] 263\n\n[[68]]\n[1] 151\n\n[[69]]\n[1] 223\n\n[[70]]\n[1] 34\n\n[[71]]\n[1] 8\n\n[[72]]\n[1] 380\n\n[[73]]\n[1] 26\n\n[[74]]\n[1] 229\n\n[[75]]\n[1] 35\n\n[[76]]\n[1] 152\n\n[[77]]\n[1] 430\n\n[[78]]\n[1] 607\n\n[[79]]\n[1] 20\n\n[[80]]\n[1] 42\n\n[[81]]\n[1] 130\n\n[[82]]\n[1] 48\n\n[[83]]\n[1] 71\n\n[[84]]\n[1] 37\n\n[[85]]\n[1] 288\n\n[[86]]\n[1] 70\n\n[[87]]\n[1] 13\n\n[[88]]\n[1] 195\n\n[[89]]\n[1] 30\n\n[[90]]\n[1] 28\n\n[[91]]\n[1] 1030\n\n[[92]]\n[1] 268\n\n[[93]]\n[1] 39\n\n[[94]]\n[1] 32\n\n[[95]]\n[1] 266\n\n[[96]]\n[1] 241\n\n[[97]]\n[1] 261\n\n[[98]]\n[1] 149\n\n[[99]]\n[1] 223\n\n[[100]]\n[1] 34\n\n[[101]]\n[1] 8\n\n[[102]]\n[1] 361\n\n[[103]]\n[1] 26\n\n[[104]]\n[1] 225\n\n[[105]]\n[1] 35\n\n[[106]]\n[1] 151\n\n[[107]]\n[1] 429\n\n[[108]]\n[1] 604\n\n[[109]]\n[1] 18\n\n[[110]]\n[1] 42\n\n[[111]]\n[1] 130\n\n[[112]]\n[1] 48\n\n[[113]]\n[1] 72\n\n[[114]]\n[1] 37\n\n[[115]]\n[1] 289\n\n[[116]]\n[1] 69\n\n[[117]]\n[1] 13\n\n[[118]]\n[1] 185\n\n[[119]]\n[1] 30\n\n[[120]]\n[1] 28\n\n[[121]]\n[1] 1027\n\n[[122]]\n[1] 273\n\n[[123]]\n[1] 43\n\n[[124]]\n[1] 32\n\n[[125]]\n[1] 472\n\n[[126]]\n[1] 243\n\n[[127]]\n[1] 260\n\n[[128]]\n[1] 148\n\n[[129]]\n[1] 221\n\n[[130]]\n[1] 35\n\n[[131]]\n[1] 9\n\n[[132]]\n[1] 364\n\n[[133]]\n[1] 26\n\n[[134]]\n[1] 229\n\n[[135]]\n[1] 36\n\n[[136]]\n[1] 304\n\n[[137]]\n[1] 499\n\n[[138]]\n[1] 603\n\n[[139]]\n[1] 19\n\n[[140]]\n[1] 42\n\n[[141]]\n[1] 132\n\n[[142]]\n[1] 80\n\n[[143]]\n[1] 87\n\n[[144]]\n[1] 41\n\n[[145]]\n[1] 287\n\n[[146]]\n[1] 61\n\n[[147]]\n[1] 13\n\n[[148]]\n[1] 180\n\n[[149]]\n[1] 30\n\n[[150]]\n[1] 29\n\n[[151]]\n[1] 3085\n\n[[152]]\n[1] 810\n\n[[153]]\n[1] 121\n\n[[154]]\n[1] 96\n\n[[155]]\n[1] 1004\n\n[[156]]\n[1] 726\n\n[[157]]\n[1] 784\n\n[[158]]\n[1] 448\n\n[[159]]\n[1] 667\n\n[[160]]\n[1] 103\n\n[[161]]\n[1] 19\n\n[[162]]\n[1] 1105\n\n[[163]]\n[1] 78\n\n[[164]]\n[1] 683\n\n[[165]]\n[1] 106\n\n[[166]]\n[1] 607\n\n[[167]]\n[1] 1358\n\n[[168]]\n[1] 1814\n\n[[169]]\n[1] 57\n\n[[170]]\n[1] 126\n\n[[171]]\n[1] 392\n\n[[172]]\n[1] 176\n\n[[173]]\n[1] 230\n\n[[174]]\n[1] 115\n\n[[175]]\n[1] 864\n\n[[176]]\n[1] 200\n\n[[177]]\n[1] 39\n\n[[178]]\n[1] 560\n\n[[179]]\n[1] 90\n\n[[180]]\n[1] 85\n\ncolonnes_int &lt;- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\ndata_medailles_sport_ete[colonnes_int] &lt;- lapply(data_medailles_sport_ete[colonnes_int], as.integer)"
  },
  {
    "objectID": "posts/TP semaine 2/TD2.html#question-3",
    "href": "posts/TP semaine 2/TD2.html#question-3",
    "title": "TD2",
    "section": "",
    "text": "Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\ndata_medailles_sport_ete |&gt; arrange(desc(Total)) |&gt; head(3)\n\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                  &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes disciplines ayant distribués le plus de médailles distribués sont donc l’athlétisme en première position, suivi par la natation et la lutte."
  },
  {
    "objectID": "posts/TP semaine 2/TD2.html#question-4",
    "href": "posts/TP semaine 2/TD2.html#question-4",
    "title": "TD2",
    "section": "",
    "text": "Quelles sont les disciplines avec le moins d’épreuves en 2020 ?\n\nmoins_epreuve &lt;- data_medailles_sport_ete |&gt;  dplyr::filter( Epreuves_2020 == min(Epreuves_2020))\nprint(moins_epreuve)\n\n# A tibble: 8 × 10\n  Discipline            Annees  Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                 &lt;chr&gt;      &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Football              1900–1…       27             2    34     34     35   103\n2 Golf                  1900–1…        4             2     8      8      9    19\n3 Handball              1936,d…       14             2    26     26     26    78\n4 Hockey sur gazon      1908, …       24             2    35     35     36   106\n5 Natation synchronisée Depuis…       10             2    20     18     19    57\n6 Pentathlon moderne    Depuis…       25             2    42     42     42   126\n7 Volley-ball           Depuis…       15             2    30     30     30    90\n8 Water polo            1900,d…       26             2    28     28     29    85\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes 8 disciplines affichées ci dessus sont celles avec le moins d’épreuves pour 2020. Ces dernières n’en auront que 2 chacunes."
  },
  {
    "objectID": "posts/TP semaine 2/TD2.html#question-5",
    "href": "posts/TP semaine 2/TD2.html#question-5",
    "title": "TD2",
    "section": "",
    "text": "La colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\ncalcul_nb_editions_int &lt;- function(depuis){\n  nb_apparences &lt;- (2024 - depuis) / 4\n  if (depuis &lt; 1917){\n    nb_apparences &lt;- nb_apparences - 3\n  } else if (depuis &gt;= 1917 & depuis &lt;= 1940){\n    nb_apparences &lt;- nb_apparences - 2\n  } else if (depuis &gt;= 1941 & depuis &lt;= 1944){\n    nb_apparences &lt;- nb_apparences - 1\n  }\n  return(nb_apparences)\n}\ncalcul_nb_editions_int(1980)\n\n[1] 11\n\n\nCette fonction permet de mesurer le nombre d’apparition des disciplines au JO en sachant que les éditions de 1916, 1940 et 1944 n’ont pas eu lieu pour cause de guerre mondiale. Cette fonction marche uniquement pour les disciplines ayant apparuent régulièrement et uniquement depuis leur première apparition."
  },
  {
    "objectID": "posts/TP semaine 2/TD2.html#question-6",
    "href": "posts/TP semaine 2/TD2.html#question-6",
    "title": "TD2",
    "section": "",
    "text": "Dans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères.\n\ncalcul_nb_editions_str &lt;- function(chaine_cara){\n  addition1=0\n  addition2=0\n  soustraction1 = 0\n  soustraction2 = 0\n  soustraction3 = 0\n  date_origine = 0\n  result = 0\n vecteur_date &lt;- unlist(str_split(chaine_cara, \",\"))\n for (i in seq_along(vecteur_date)){\n   if (grepl(\"-\", vecteur_date[i])){\n     addition1 = addition1 + (as.numeric(substr(vecteur_date[i], start = 5, stop = 9))\n                              - as.numeric(substr(vecteur_date[[i]], start = 1, stop = 4))) / 4\n   }else if(grepl(\"depuis\", vecteur_date[i])){\n     date_origine = as.numeric(substr(vecteur_date[i], start = 9, stop = 12))\n     parutions_theoriques = (2024 - date_origine)/4\n     if (date_origine &lt; 1917){\n       soustraction1 &lt;- soustraction1 + 3\n     } else if (date_origine &gt;= 1917 & date_origine &lt;= 1940){\n       soustraction2 &lt;- soustraction2 + 2\n     } else if (date_origine &gt;= 1941 & date_origine &lt;= 1944){\n       soustraction3 &lt;- soustraction3 + 1\n     }\n   }else{\n     addition2 = addition2 + 1\n   }\n }\n\n result = parutions_theoriques + addition1 + addition2 - soustraction1 - soustraction2 - soustraction3\n return(result)\n}\n\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\n[1] 26\n\n\nCette fois, la fonction prend pour argument des chaines de caractères. De plus, elle renvoie bien 26 lorqu’on lui passe l’argument : “1896, 1904, depuis 1920”."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog R avancé",
    "section": "",
    "text": "TD1\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTD2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nBienvenue sur mon Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2024\n\n\nUgo Gestin\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "À propos",
    "section": "",
    "text": "About this blog"
  }
]